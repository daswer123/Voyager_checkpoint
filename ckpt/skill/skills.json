{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  const woodLogNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n\n  // Find a wood log block\n  const woodLog = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    for (const name of woodLogNames) {\n      const log = bot.findBlock({\n        matching: mcData.blocksByName[name].id,\n        maxDistance: 32\n      });\n      if (log) {\n        return log;\n      }\n    }\n    return null;\n  });\n  if (woodLog) {\n    // Mine the wood log block\n    await mineBlock(bot, woodLog.name, 1);\n    bot.chat(\"Wood log mined.\");\n  } else {\n    bot.chat(\"Could not find a wood log.\");\n  }\n}", "description": "async function mineWoodLog(bot) {\n    // The function is about mining a wood log block. It searches for a wood log block by exploring the environment until it finds one of the seven types of wood logs. Once a wood log block is found, it is mined and a message is sent to the chat. If a wood log block is not found, a message is sent to the chat indicating that it could not be found.\n}"}, "obtainSpruceLogs": {"code": "async function obtainSpruceLogs(bot) {\n  // Find 3 spruce_log blocks\n  const spruceLogs = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const spruceLog = bot.findBlock({\n      matching: mcData.blocksByName[\"spruce_log\"].id,\n      maxDistance: 32,\n      count: 3\n    });\n    return spruceLog ? spruceLog : null;\n  });\n  if (spruceLogs) {\n    // Mine the spruce_log blocks\n    await mineBlock(bot, \"spruce_log\", 3);\n    bot.chat(\"3 spruce logs obtained.\");\n  } else {\n    bot.chat(\"Could not find enough spruce logs.\");\n  }\n}", "description": "async function obtainSpruceLogs(bot) {\n    // The function is about obtaining 3 spruce logs. It explores the environment until it finds 3 spruce_log blocks within a certain distance. Once the blocks are found, it mines them and sends a message indicating that 3 spruce logs have been obtained. If the blocks are not found, it sends a message indicating that it could not find enough spruce logs.\n}"}, "craftWoodenPlanks": {"code": "async function craftWoodenPlanks(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  }) || bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft a crafting table using the spruce_log in the inventory\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft 4 wooden planks using the spruce_log in the inventory\n  await craftItem(bot, \"spruce_planks\", 1);\n  bot.chat(\"4 wooden planks crafted.\");\n}", "description": "async function craftWoodenPlanks(bot) {\n    // The function crafts 4 wooden planks using a spruce log in the inventory. If there is no crafting table nearby, it crafts one using the spruce log. Then, it places the crafting table near the bot and crafts the wooden planks.\n}"}, "craftWoodenPickaxe": {"code": "async function craftWoodenPickaxe(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  }) || bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft a crafting table using the spruce_log in the inventory\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Convert the spruce logs into planks\n  await craftItem(bot, \"spruce_planks\", 3);\n\n  // Craft 4 sticks using 2 spruce_planks\n  await craftItem(bot, \"stick\", 2);\n\n  // Craft a wooden pickaxe using 3 spruce_planks and 2 sticks\n  await craftItem(bot, \"wooden_pickaxe\", 1);\n  bot.chat(\"Wooden pickaxe crafted.\");\n}", "description": "async function craftWoodenPickaxe(bot) {\n    // The function crafts a wooden pickaxe by first checking if there is a crafting table nearby, and if not, crafting one using a spruce log. It then places the crafting table near the bot and converts spruce logs into planks. After that, it crafts sticks and finally crafts a wooden pickaxe using the planks and sticks.\n}"}, "mineTenCobblestone": {"code": "async function mineTenCobblestone(bot) {\n  // Find a stone block\n  const stone = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const stoneBlock = bot.findBlock({\n      matching: mcData.blocksByName[\"stone\"].id,\n      maxDistance: 32\n    });\n    return stoneBlock;\n  });\n  if (stone) {\n    // Mine 10 cobblestone\n    await mineBlock(bot, \"stone\", 10);\n    bot.chat(\"10 cobblestone mined.\");\n  } else {\n    bot.chat(\"Could not find a stone block.\");\n  }\n}", "description": "async function mineTenCobblestone(bot) {\n    // The function is about mining 10 cobblestones. It explores the environment until finding a stone block. Once a stone block is found, it mines a total of 10 cobblestone blocks using the wooden pickaxe. If it cannot find a stone block, it sends a message saying it could not find one.\n}"}, "craftStonePickaxe": {"code": "async function craftStonePickaxe(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n\n  // If not, place the crafting table from the inventory\n  if (!craftingTable) {\n    const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n    if (craftingTableItem) {\n      const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    } else {\n      bot.chat(\"No crafting table found.\");\n      return;\n    }\n  }\n\n  // Craft a stone pickaxe using 3 cobblestone and 2 sticks\n  await craftItem(bot, \"stone_pickaxe\", 1);\n  bot.chat(\"Stone pickaxe crafted.\");\n}", "description": "async function craftStonePickaxe(bot) {\n    // The function crafts a stone pickaxe using 3 cobblestone and 2 sticks. It checks if there is a crafting table nearby, and if not, places one from the inventory. If there is no crafting table in the inventory, the function ends. Once a crafting table is available, the function crafts a stone pickaxe and sends a chat message indicating that the pickaxe has been crafted.\n}"}, "mineFiveCoalOres": {"code": "async function mineFiveCoalOres(bot) {\n  // Check if there are 5 coal ores nearby\n  const coalOres = bot.findBlocks({\n    matching: mcData.blocksByName[\"coal_ore\"].id,\n    maxDistance: 32,\n    count: 5\n  });\n\n  // If not, explore the area to find coal ores\n  if (coalOres.length < 5) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const coalOre = bot.findBlock({\n        matching: mcData.blocksByName[\"coal_ore\"].id,\n        maxDistance: 32\n      });\n      return coalOre;\n    });\n  }\n\n  // Mine 5 coal ores using the stone_pickaxe\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"5 coal ores mined.\");\n}", "description": "async function mineFiveCoalOres(bot) {\n    // The function is about mining 5 coal ores using a stone pickaxe. First, it checks if there are 5 coal ores nearby. If not, it explores the area to find coal ores. Once 5 coal ores are found, it mines them using the stone pickaxe and sends a chat message.\n}"}, "mineOneIronOre": {"code": "async function mineOneIronOre(bot) {\n  // Equip the stone_pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Find an iron_ore block nearby\n  let ironOre = bot.findBlock({\n    matching: mcData.blocksByName.iron_ore.id,\n    maxDistance: 32\n  });\n\n  // If not found, explore the area to find an iron_ore block\n  if (!ironOre) {\n    ironOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const ironOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.iron_ore.id,\n        maxDistance: 32\n      });\n      return ironOreBlock;\n    });\n  }\n\n  // Mine the iron_ore block using the stone_pickaxe\n  if (ironOre) {\n    await mineBlock(bot, \"iron_ore\", 1);\n    bot.chat(\"1 iron ore mined.\");\n  } else {\n    bot.chat(\"Could not find an iron ore block.\");\n  }\n}", "description": "async function mineOneIronOre(bot) {\n    // The function is about mining one iron ore block using a stone pickaxe. First, equip the stone pickaxe in the hand. Then, find an iron ore block nearby. If not found, explore the area to find an iron ore block. Once an iron ore block is found, mine it using the stone pickaxe.\n}"}, "smeltIronOre": {"code": "async function smeltIronOre(bot) {\n  // Find a suitable location to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace at the chosen location\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 1 raw_iron into 1 iron_ingot using 1 coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 1);\n  bot.chat(\"1 iron ore smelted.\");\n}", "description": "async function smeltIronOre(bot) {\n    // The function is about smelting 1 raw iron ore into 1 iron ingot using 1 coal as fuel. It first finds a suitable location to place the furnace, then places the furnace at the chosen location. Finally, it smelts the raw iron ore into an iron ingot using coal as fuel and outputs a message indicating that 1 iron ore has been smelted.\n}"}, "craftIronPickaxe": {"code": "async function craftIronPickaxe(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_ingot.id);\n  if (!ironIngots || ironIngots.count < 3) {\n    // Mine iron ores\n    await mineBlock(bot, \"iron_ore\", 3 - (ironIngots ? ironIngots.count : 0));\n\n    // Check if there is a furnace in the inventory or nearby\n    const furnace = bot.findBlock({\n      matching: mcData.blocksByName.furnace.id,\n      maxDistance: 32\n    });\n\n    // If not, place the furnace from the inventory\n    if (!furnace) {\n      const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n      if (furnaceItem) {\n        const furnacePosition = bot.entity.position.offset(1, 0, 0);\n        await placeItem(bot, \"furnace\", furnacePosition);\n      } else {\n        bot.chat(\"No furnace found.\");\n        return;\n      }\n    }\n\n    // Smelt the iron ores in the furnace to obtain the required iron ingots\n    await smeltItem(bot, \"raw_iron\", \"coal\", 3 - (ironIngots ? ironIngots.count : 0));\n  }\n\n  // Check if there is a crafting table in the inventory or nearby\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n\n  // If not, place the crafting table from the inventory\n  if (!craftingTable) {\n    const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n    if (craftingTableItem) {\n      const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    } else {\n      bot.chat(\"No crafting table found.\");\n      return;\n    }\n  }\n\n  // Craft an iron pickaxe using 3 iron ingots and 2 sticks\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Iron pickaxe crafted.\");\n}", "description": "async function craftIronPickaxe(bot) {\n    // The function crafts an iron pickaxe using 3 iron ingots and 2 sticks. If there are not enough iron ingots, it mines iron ores and smelts them in a furnace to obtain the required amount. If there is no furnace or crafting table nearby, it places them from the inventory.\n}"}, "mineOneLapisOreSafely": {"code": "async function mineOneLapisOreSafely(bot) {\n  // Check if the bot's hunger is less than the maximum hunger\n  if (bot.food < 20) {\n    // Check if the bot has enough food in the inventory\n    const food = bot.inventory.items().find(item => item.foodPoints);\n\n    // If not, find and kill a pig to obtain food\n    if (!food) {\n      await killMob(bot, \"pig\", 300);\n    }\n\n    // Consume the food to restore hunger\n    await bot.equip(food, \"hand\");\n    await bot.consume();\n  }\n\n  // Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find a lapis_ore block nearby or explore the area to find one\n  let lapisOre = bot.findBlock({\n    matching: mcData.blocksByName.lapis_ore.id,\n    maxDistance: 32\n  });\n  if (!lapisOre) {\n    lapisOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const lapisOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.lapis_ore.id,\n        maxDistance: 32\n      });\n      return lapisOreBlock;\n    });\n  }\n\n  // Mine the lapis_ore block using the iron_pickaxe\n  if (lapisOre) {\n    await mineBlock(bot, \"lapis_ore\", 1);\n    bot.chat(\"1 lapis ore mined safely.\");\n  } else {\n    bot.chat(\"Could not find a lapis ore block.\");\n  }\n}", "description": "async function mineOneLapisOreSafely(bot) {\n    // The function is about mining one lapis ore block safely using an iron pickaxe. First, check if the bot's hunger is less than the maximum hunger. If so, check if the bot has enough food in the inventory. If not, find and kill a pig to obtain food and consume it to restore hunger. Equip the iron pickaxe and find a lapis ore block nearby or explore the area to find one. Finally, mine the lapis ore block using the iron pickaxe.\n}"}, "smeltRawIron": {"code": "async function smeltRawIron(bot) {\n  // Check if there is a furnace in the inventory or nearby\n  const furnace = bot.findBlock({\n    matching: mcData.blocksByName.furnace.id,\n    maxDistance: 32\n  });\n\n  // If not, place the furnace from the inventory\n  if (!furnace) {\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    if (furnaceItem) {\n      const furnacePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"furnace\", furnacePosition);\n    } else {\n      bot.chat(\"No furnace found.\");\n      return;\n    }\n  }\n\n  // Smelt 2 raw iron using coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 2);\n  bot.chat(\"2 raw iron smelted.\");\n}", "description": "async function smeltRawIron(bot) {\n    // The function is about smelting 2 raw iron using coal as fuel. It checks if there is a furnace nearby or in the inventory, and if not, places one from the inventory. Then it smelts 2 raw iron using coal as fuel and sends a chat message when finished.\n}"}, "craftIronChestplate": {"code": "async function craftIronChestplate(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_ingot.id);\n  if (!ironIngots || ironIngots.count < 8) {\n    // Mine iron ores\n    await mineBlock(bot, \"iron_ore\", 8 - (ironIngots ? ironIngots.count : 0));\n\n    // Check if there is a furnace nearby or in the inventory\n    let furnace = bot.findBlock({\n      matching: mcData.blocksByName.furnace.id,\n      maxDistance: 32\n    });\n\n    // If not, place the furnace from the inventory\n    if (!furnace) {\n      const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n      if (furnaceItem) {\n        const furnacePosition = bot.entity.position.offset(1, 0, 0);\n        await placeItem(bot, \"furnace\", furnacePosition);\n        furnace = bot.blockAt(furnacePosition);\n      } else {\n        bot.chat(\"No furnace found.\");\n        return;\n      }\n    }\n\n    // Smelt the iron ores in the furnace to obtain the required iron ingots\n    await smeltItem(bot, \"raw_iron\", \"coal\", 8 - (ironIngots ? ironIngots.count : 0));\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n\n  // If not, place the crafting table from the inventory\n  if (!craftingTable) {\n    const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n    if (craftingTableItem) {\n      const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"crafting_table\", craftingTablePosition);\n      craftingTable = bot.blockAt(craftingTablePosition);\n    } else {\n      bot.chat(\"No crafting table found.\");\n      return;\n    }\n  }\n\n  // Craft an iron chestplate using 8 iron ingots\n  await craftItem(bot, \"iron_chestplate\", 1);\n  bot.chat(\"Iron chestplate crafted.\");\n}", "description": "async function craftIronChestplate(bot) {\n    // The function crafts an iron chestplate using 8 iron ingots. It checks if there are enough iron ingots in the inventory, and if not, it mines iron ores and smelts them in a furnace to obtain the required amount. It then checks if there is a crafting table nearby or in the inventory, and if not, it places one from the inventory. Finally, it crafts the iron chestplate using the crafting table and announces the success.\n}"}, "equipIronChestplate": {"code": "async function equipIronChestplate(bot) {\n  // Check if the bot has an iron chestplate in its inventory\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName.iron_chestplate.id);\n\n  // Equip the iron chestplate if found\n  if (ironChestplate) {\n    await bot.equip(ironChestplate, \"torso\");\n    bot.chat(\"Iron chestplate equipped.\");\n  } else {\n    bot.chat(\"No iron chestplate found in inventory.\");\n  }\n}", "description": "async function equipIronChestplate(bot) {\n    // The function is about equipping an iron chestplate on the bot's torso if it is available in the inventory. If the iron chestplate is found, it is equipped and a message is sent to the chat. If the iron chestplate is not found, a message is sent to the chat indicating that it is not available in the inventory.\n}"}, "mineTenCoalOres": {"code": "async function mineTenCoalOres(bot) {\n  // Check if there are 10 coal ores nearby\n  const coalOres = bot.findBlocks({\n    matching: mcData.blocksByName[\"coal_ore\"].id,\n    maxDistance: 32,\n    count: 10\n  });\n\n  // If not, explore the area to find coal ores\n  if (coalOres.length < 10) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const coalOre = bot.findBlock({\n        matching: mcData.blocksByName[\"coal_ore\"].id,\n        maxDistance: 32\n      });\n      return coalOre;\n    });\n  }\n\n  // Mine 10 coal ores using the iron_pickaxe\n  await mineBlock(bot, \"coal_ore\", 10);\n  bot.chat(\"10 coal ores mined.\");\n}", "description": "async function mineTenCoalOres(bot) {\n    // The function is about mining 10 coal ores using an iron pickaxe. It first checks if there are 10 coal ores nearby, and if not, it explores the area to find them. Once 10 coal ores are found, it mines them using the iron pickaxe and sends a chat message indicating that 10 coal ores have been mined.\n}"}, "mineFiveCopperOres": {"code": "async function mineFiveCopperOres(bot) {\n  // Check if there are 5 copper ores nearby\n  const copperOres = bot.findBlocks({\n    matching: mcData.blocksByName[\"copper_ore\"].id,\n    maxDistance: 32,\n    count: 5\n  });\n\n  // If not, explore the area to find copper ores\n  if (copperOres.length < 5) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const copperOre = bot.findBlock({\n        matching: mcData.blocksByName[\"copper_ore\"].id,\n        maxDistance: 32\n      });\n      return copperOre;\n    });\n  }\n\n  // Mine 5 copper ores using the iron_pickaxe\n  await mineBlock(bot, \"copper_ore\", 5);\n  bot.chat(\"5 copper ores mined.\");\n}", "description": "async function mineFiveCopperOres(bot) {\n    // The function is about mining 5 copper ores using an iron pickaxe. First, it checks if there are 5 copper ores nearby. If not, it explores the area to find copper ores. Once 5 copper ores are found, it mines them using the iron pickaxe and sends a chat message.\n}"}, "smeltTenRawIron": {"code": "async function smeltTenRawIron(bot) {\n  // Check if there is a furnace in the inventory or nearby\n  const furnace = bot.findBlock({\n    matching: mcData.blocksByName.furnace.id,\n    maxDistance: 32\n  });\n\n  // If not, place the furnace from the inventory\n  if (!furnace) {\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    if (furnaceItem) {\n      const furnacePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"furnace\", furnacePosition);\n    } else {\n      bot.chat(\"No furnace found.\");\n      return;\n    }\n  }\n\n  // Smelt 10 raw iron using coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 10);\n  bot.chat(\"10 raw iron smelted.\");\n}", "description": "async function smeltTenRawIron(bot) {\n    // The function is about smelting 10 raw iron using coal as fuel. It checks if there is a furnace nearby, and if not, places one from the inventory. Then it smelts 10 raw iron using coal as fuel and saves the event of smelting 10 raw iron.\n}"}, "craftIronHelmet": {"code": "async function craftIronHelmet(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_ingot.id);\n  if (!ironIngots || ironIngots.count < 5) {\n    // Mine iron ores\n    await mineBlock(bot, \"iron_ore\", 5 - (ironIngots ? ironIngots.count : 0));\n\n    // Smelt the iron ores to obtain the required iron ingots\n    await smeltItem(bot, \"raw_iron\", \"coal\", 5 - (ironIngots ? ironIngots.count : 0));\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n\n  // If not, place the crafting table from the inventory\n  if (!craftingTable) {\n    const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n    if (craftingTableItem) {\n      const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"crafting_table\", craftingTablePosition);\n      craftingTable = bot.blockAt(craftingTablePosition);\n    } else {\n      bot.chat(\"No crafting table found.\");\n      return;\n    }\n  }\n\n  // Craft an iron helmet using 5 iron ingots\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Iron helmet crafted.\");\n}", "description": "async function craftIronHelmet(bot) {\n    // The function crafts an iron helmet using 5 iron ingots. If there are not enough iron ingots in the inventory, it mines iron ores and smelts them to obtain the required amount. It then checks if there is a crafting table nearby or in the inventory, and if not, places one from the inventory. Finally, it crafts the iron helmet and sends a chat message.\n}"}, "craftIronSword": {"code": "async function craftIronSword(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n\n  // If not, place the crafting table from the inventory\n  if (!craftingTable) {\n    const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n    if (craftingTableItem) {\n      const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    } else {\n      bot.chat(\"No crafting table found.\");\n      return;\n    }\n  }\n\n  // Craft an iron sword using 2 iron ingots and 1 stick\n  await craftItem(bot, \"iron_sword\", 1);\n  bot.chat(\"Iron sword crafted.\");\n}", "description": "async function craftIronSword(bot) {\n    // The function crafts an iron sword using 2 iron ingots and 1 stick. It first checks if there is a crafting table nearby, and if not, places one from the inventory. Then it crafts the iron sword and sends a chat message indicating success.\n}"}, "craftIronLeggings": {"code": "async function craftIronLeggings(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_ingot.id);\n  if (!ironIngots || ironIngots.count < 7) {\n    // Mine iron ores\n    await mineBlock(bot, \"iron_ore\", 7 - (ironIngots ? ironIngots.count : 0));\n\n    // Smelt the iron ores to obtain the required iron ingots\n    await smeltItem(bot, \"raw_iron\", \"coal\", 7 - (ironIngots ? ironIngots.count : 0));\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n\n  // If not, place the crafting table from the inventory\n  if (!craftingTable) {\n    const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n    if (craftingTableItem) {\n      const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"crafting_table\", craftingTablePosition);\n      craftingTable = bot.blockAt(craftingTablePosition);\n    } else {\n      bot.chat(\"No crafting table found.\");\n      return;\n    }\n  }\n\n  // Craft iron leggings using 7 iron ingots\n  await craftItem(bot, \"iron_leggings\", 1);\n  bot.chat(\"Iron leggings crafted.\");\n}", "description": "async function craftIronLeggings(bot) {\n    // The function crafts a pair of iron leggings using 7 iron ingots. If there are not enough iron ingots in the inventory, the bot mines iron ores and smelts them to obtain the required amount. It then checks for a nearby crafting table and places one from the inventory if there isn't any. Finally, it crafts the iron leggings and sends a chat message.\n}"}, "craftIronBoots": {"code": "async function craftIronBoots(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_ingot.id);\n  if (!ironIngots || ironIngots.count < 4) {\n    // Mine iron ores\n    await mineBlock(bot, \"iron_ore\", 4 - (ironIngots ? ironIngots.count : 0));\n\n    // Check if there is a furnace nearby or in the inventory\n    let furnace = bot.findBlock({\n      matching: mcData.blocksByName.furnace.id,\n      maxDistance: 32\n    });\n\n    // If not, place the furnace from the inventory\n    if (!furnace) {\n      const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n      if (furnaceItem) {\n        const furnacePosition = bot.entity.position.offset(1, 0, 0);\n        await placeItem(bot, \"furnace\", furnacePosition);\n        furnace = bot.blockAt(furnacePosition);\n      } else {\n        bot.chat(\"No furnace found.\");\n        return;\n      }\n    }\n\n    // Smelt the iron ores in the furnace to obtain the required iron ingots\n    await smeltItem(bot, \"raw_iron\", \"coal\", 4 - (ironIngots ? ironIngots.count : 0));\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n\n  // If not, place the crafting table from the inventory\n  if (!craftingTable) {\n    const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n    if (craftingTableItem) {\n      const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"crafting_table\", craftingTablePosition);\n      craftingTable = bot.blockAt(craftingTablePosition);\n    } else {\n      bot.chat(\"No crafting table found.\");\n      return;\n    }\n  }\n\n  // Craft iron boots using 4 iron ingots\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Iron boots crafted.\");\n}", "description": "async function craftIronBoots(bot) {\n    // The function crafts iron boots using 4 iron ingots. If there are not enough iron ingots in the inventory, it mines iron ores and smelts them in a furnace to obtain the required amount. If there is no furnace nearby, it places one from the inventory. If there is no crafting table nearby, it places one from the inventory. Finally, it crafts the iron boots and sends a chat message.\n}"}, "smeltFiveRawCopper": {"code": "async function smeltFiveRawCopper(bot) {\n  // Check if there is a furnace in the inventory or nearby\n  const furnace = bot.findBlock({\n    matching: mcData.blocksByName.furnace.id,\n    maxDistance: 32\n  });\n\n  // If not, place the furnace from the inventory\n  if (!furnace) {\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    if (furnaceItem) {\n      const furnacePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"furnace\", furnacePosition);\n    } else {\n      bot.chat(\"No furnace found.\");\n      return;\n    }\n  }\n\n  // Smelt 5 raw copper using coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 5);\n  bot.chat(\"5 raw copper smelted.\");\n}", "description": "async function smeltFiveRawCopper(bot) {\n    // The function is about smelting 5 raw copper using coal as fuel. It checks if there is a furnace nearby or in the inventory, and if not, places one from the inventory. Then it smelts 5 raw copper using coal as fuel and sends a chat message when finished.\n}"}, "mineOneDiamondOre": {"code": "async function mineOneDiamondOre(bot) {\n  // Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find a diamond_ore block nearby or explore the area to find one\n  let diamondOre = bot.findBlock({\n    matching: mcData.blocksByName.diamond_ore.id,\n    maxDistance: 32\n  });\n  if (!diamondOre) {\n    diamondOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const diamondOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.diamond_ore.id,\n        maxDistance: 32\n      });\n      return diamondOreBlock;\n    });\n  }\n\n  // Mine the diamond_ore block using the iron_pickaxe\n  if (diamondOre) {\n    await mineBlock(bot, \"diamond_ore\", 1);\n    bot.chat(\"1 diamond ore mined.\");\n  } else {\n    bot.chat(\"Could not find a diamond ore block.\");\n  }\n}", "description": "async function mineOneDiamondOre(bot) {\n    // The function is about mining a single diamond ore block using an iron pickaxe. First, the function equips the iron pickaxe. Then, it searches for a nearby diamond ore block. If it cannot find one, it explores the area until it finds one. Finally, it mines the diamond ore block using the iron pickaxe and reports the success or failure of the operation.\n}"}, "craftDiamondPickaxe": {"code": "async function craftDiamondPickaxe(bot) {\n  // Step 1: Equip the iron pickaxe from the inventory\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Find and mine 1 diamond ore to get 1 more diamond\n  await mineOneDiamondOre(bot);\n\n  // Step 3: Craft 1 more stick using the spruce planks in the inventory if needed\n  const sticks = bot.inventory.findInventoryItem(mcData.itemsByName.stick.id);\n  if (!sticks || sticks.count < 2) {\n    await craftItem(bot, \"stick\", 1);\n  }\n\n  // Step 4: Check if there is a crafting table nearby or in the inventory, and place it if needed\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  }) || bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n  const craftingTableBlock = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTableBlock) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  }\n\n  // Step 5: Craft a diamond pickaxe using 3 diamonds and 2 sticks\n  await craftItem(bot, \"diamond_pickaxe\", 1);\n  bot.chat(\"Diamond pickaxe crafted.\");\n}", "description": "async function craftDiamondPickaxe(bot) {\n    // The function is about crafting a diamond pickaxe. It first equips an iron pickaxe from the inventory, then finds and mines 1 diamond ore to get 1 more diamond. If needed, it crafts 1 more stick using the spruce planks in the inventory. It then checks if there is a crafting table nearby or in the inventory, and places it if needed. Finally, it crafts a diamond pickaxe using 3 diamonds and 2 sticks.\n}"}, "mineDeepslateDiamondOre": {"code": "async function mineDeepslateDiamondOre(bot) {\n  // Step 1: Equip the diamond_pickaxe\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_pickaxe.id);\n  await bot.equip(diamondPickaxe, \"hand\");\n\n  // Step 2: Find a deepslate_diamond_ore block nearby or explore the area to find one\n  let deepslateDiamondOre = bot.findBlock({\n    matching: mcData.blocksByName.deepslate_diamond_ore.id,\n    maxDistance: 32\n  });\n  if (!deepslateDiamondOre) {\n    deepslateDiamondOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const deepslateDiamondOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.deepslate_diamond_ore.id,\n        maxDistance: 32\n      });\n      return deepslateDiamondOreBlock;\n    });\n  }\n\n  // Step 3: Mine the deepslate_diamond_ore block using the diamond_pickaxe\n  if (deepslateDiamondOre) {\n    await mineBlock(bot, \"deepslate_diamond_ore\", 1);\n    bot.chat(\"1 deepslate diamond ore mined.\");\n  } else {\n    bot.chat(\"Could not find a deepslate diamond ore block.\");\n  }\n}", "description": "async function mineDeepslateDiamondOre(bot) {\n    // The function is about mining a single deepslate diamond ore block using a diamond pickaxe. First, equip the diamond pickaxe in the hand. Next, find a nearby deepslate diamond ore block or explore the area to find one. Once a deepslate diamond ore block is found, mine it using the diamond pickaxe.\n}"}, "mineFiveDeepslateIronOreWithDiamondPickaxe": {"code": "async function mineFiveDeepslateIronOreWithDiamondPickaxe(bot) {\n  // Step 1: Equip the diamond_pickaxe\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_pickaxe.id);\n  await bot.equip(diamondPickaxe, \"hand\");\n\n  // Step 2: Find a deepslate_iron_ore block nearby or explore the area to find one\n  let deepslateIronOre = bot.findBlock({\n    matching: mcData.blocksByName.deepslate_iron_ore.id,\n    maxDistance: 32\n  });\n  if (!deepslateIronOre) {\n    deepslateIronOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const deepslateIronOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.deepslate_iron_ore.id,\n        maxDistance: 32\n      });\n      return deepslateIronOreBlock;\n    });\n  }\n\n  // Step 3: Mine 5 deepslate_iron_ore blocks using the diamond_pickaxe\n  if (deepslateIronOre) {\n    await mineBlock(bot, \"deepslate_iron_ore\", 5);\n    bot.chat(\"5 deepslate iron ores mined with diamond pickaxe.\");\n  } else {\n    bot.chat(\"Could not find deepslate iron ore blocks.\");\n  }\n}", "description": "async function mineFiveDeepslateIronOreWithDiamondPickaxe(bot) {\n    // The function is about mining 5 deepslate iron ores using a diamond pickaxe. First, equip the diamond pickaxe in the hand. Next, find a nearby deepslate iron ore block or explore the area to find one. Once a deepslate iron ore block is found, mine a total of 5 deepslate iron ore blocks using the diamond pickaxe.\n}"}, "equipIronArmor": {"code": "async function equipIronArmor(bot) {\n  // Equip the iron helmet from the inventory\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName.iron_helmet.id);\n  if (ironHelmet) {\n    await bot.equip(ironHelmet, \"head\");\n    bot.chat(\"Iron helmet equipped.\");\n  } else {\n    bot.chat(\"No iron helmet found in inventory.\");\n  }\n\n  // Equip the iron leggings from the inventory\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName.iron_leggings.id);\n  if (ironLeggings) {\n    await bot.equip(ironLeggings, \"legs\");\n    bot.chat(\"Iron leggings equipped.\");\n  } else {\n    bot.chat(\"No iron leggings found in inventory.\");\n  }\n\n  // Equip the iron boots from the inventory\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_boots.id);\n  if (ironBoots) {\n    await bot.equip(ironBoots, \"feet\");\n    bot.chat(\"Iron boots equipped.\");\n  } else {\n    bot.chat(\"No iron boots found in inventory.\");\n  }\n}", "description": "async function equipIronArmor(bot) {\n    // The function is about equipping iron armor pieces from the inventory. The function equips the iron helmet, iron leggings, and iron boots in that order if they are available in the inventory. If an item is not found in the inventory, the function will output a message indicating that the item is not available.\n}"}, "mineFiveCalciteBlocks": {"code": "async function mineFiveCalciteBlocks(bot) {\n  // Step 1: Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Find a calcite block nearby or explore the area to find one\n  let calciteBlock = bot.findBlock({\n    matching: mcData.blocksByName.calcite.id,\n    maxDistance: 32\n  });\n  if (!calciteBlock) {\n    calciteBlock = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const calcite = bot.findBlock({\n        matching: mcData.blocksByName.calcite.id,\n        maxDistance: 32\n      });\n      return calcite;\n    });\n  }\n\n  // Step 3: Mine 5 calcite blocks using the iron_pickaxe\n  if (calciteBlock) {\n    await mineBlock(bot, \"calcite\", 5);\n    bot.chat(\"5 calcite blocks mined.\");\n  } else {\n    bot.chat(\"Could not find calcite blocks.\");\n  }\n}", "description": "async function mineFiveCalciteBlocks(bot) {\n    // The function is about mining 5 calcite blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, find a nearby calcite block or explore the area to find one. Once a calcite block is found, mine a total of 5 calcite blocks using the iron pickaxe. If no calcite blocks are found, output a message indicating that no calcite blocks were found.\n}"}, "openChestAtPosition": {"code": "// Fix the moveToChest function if needed\nasync function moveToChest(bot, chestPosition) {\n  const chestBlock = bot.blockAt(chestPosition);\n  if (!chestBlock || chestBlock.name !== \"chest\" && chestBlock.name !== \"trapped_chest\") {\n    throw new Error(`No chest at ${chestPosition}, it is ${chestBlock?.name}`);\n  }\n  const goal = new GoalGetToBlock(chestPosition.x, chestPosition.y, chestPosition.z);\n  await bot.pathfinder.goto(goal);\n}\n\n// Call the openChestAtPosition function again\n\n// Call the openChestAtPosition function again\nasync function openChestAtPosition(bot) {\n  const chestPosition = new Vec3(-12, 62, 39);\n  await moveToChest(bot, chestPosition);\n  const chestBlock = bot.blockAt(chestPosition);\n  await bot.openContainer(chestBlock);\n  await closeChest(bot, chestBlock);\n  bot.chat(\"Chest opened and checked.\");\n}", "description": "async function openChestAtPosition(bot) {\n    // The function is about opening a chest at a specific position and checking its contents. It first calls the `moveToChest` function to move the bot to the chest's position. Then, it opens the chest and waits for it to load. After that, it calls the `closeChest` function to close the chest and prevent any further interaction. Finally, it sends a chat message indicating that the chest has been opened and checked.\n}"}, "mineDeepslateGoldOre": {"code": "async function mineDeepslateGoldOre(bot) {\n  // Step 1: Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Find a deepslate_gold_ore block nearby or explore the area to find one\n  let deepslateGoldOre = bot.findBlock({\n    matching: mcData.blocksByName.deepslate_gold_ore.id,\n    maxDistance: 32\n  });\n  if (!deepslateGoldOre) {\n    deepslateGoldOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const deepslateGoldOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.deepslate_gold_ore.id,\n        maxDistance: 32\n      });\n      return deepslateGoldOreBlock;\n    });\n  }\n\n  // Step 3: Mine the deepslate_gold_ore block using the iron_pickaxe\n  if (deepslateGoldOre) {\n    await mineBlock(bot, \"deepslate_gold_ore\", 1);\n    bot.chat(\"1 deepslate gold ore mined.\");\n  } else {\n    bot.chat(\"Could not find a deepslate gold ore block.\");\n  }\n}", "description": "async function mineDeepslateGoldOre(bot) {\n    // The function is about mining a single deepslate gold ore block using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, find a nearby deepslate gold ore block or explore the area to find one. Once a deepslate gold ore block is found, mine it using the iron pickaxe. If the block is successfully mined, a message is sent to the chat. If the block is not found, a message is sent to the chat indicating that it could not be found.\n}"}, "mineFivePointedDripstone": {"code": "async function mineFivePointedDripstone(bot) {\n  // Step 1: Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Find a pointed_dripstone block nearby or explore the area to find one\n  let pointedDripstone = bot.findBlock({\n    matching: mcData.blocksByName.pointed_dripstone.id,\n    maxDistance: 32\n  });\n  if (!pointedDripstone) {\n    pointedDripstone = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const pointedDripstoneBlock = bot.findBlock({\n        matching: mcData.blocksByName.pointed_dripstone.id,\n        maxDistance: 32\n      });\n      return pointedDripstoneBlock;\n    });\n  }\n\n  // Step 3: Mine 5 pointed_dripstone blocks using the iron_pickaxe\n  if (pointedDripstone) {\n    await mineBlock(bot, \"pointed_dripstone\", 5);\n    bot.chat(\"5 pointed dripstone blocks mined.\");\n  } else {\n    bot.chat(\"Could not find pointed dripstone blocks.\");\n  }\n}", "description": "async function mineFivePointedDripstone(bot) {\n    // The function is about mining 5 pointed dripstone blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, find a pointed dripstone block nearby or explore the area to find one. Once a pointed dripstone block is found, mine a total of 5 pointed dripstone blocks using the iron pickaxe. If no pointed dripstone blocks are found, output a message indicating that they could not be found.\n}"}, "collectSugarCanes": {"code": "async function collectSugarCanes(bot) {\n  // Find 3 sugar cane blocks nearby\n  const sugarCaneBlocks = bot.findBlocks({\n    matching: mcData.blocksByName[\"sugar_cane\"].id,\n    maxDistance: 32,\n    count: 3\n  });\n\n  // Mine the sugar cane blocks\n  if (sugarCaneBlocks.length >= 3) {\n    await mineBlock(bot, \"sugar_cane\", 3);\n    bot.chat(\"3 sugar canes collected.\");\n  } else {\n    bot.chat(\"Could not find enough sugar canes nearby.\");\n  }\n}", "description": "async function collectSugarCanes(bot) {\n    // The function is about collecting 3 sugar canes blocks nearby. It searches for 3 sugar cane blocks within a maximum distance of 32 blocks. If it finds at least 3 sugar cane blocks, it mines them and sends a message to the chat indicating that 3 sugar canes have been collected. If it cannot find enough sugar canes nearby, it sends a message to the chat indicating that it could not find enough sugar canes.\n}"}, "eatRottenFlesh": {"code": "async function eatRottenFlesh(bot) {\n  // Equip the rotten flesh in the bot's hand\n  const rottenFlesh = bot.inventory.findInventoryItem(mcData.itemsByName.rotten_flesh.id);\n  await bot.equip(rottenFlesh, \"hand\");\n\n  // Consume the rotten flesh\n  await bot.consume();\n  bot.chat(\"Rotten flesh consumed.\");\n}", "description": "async function eatRottenFlesh(bot) {\n    // The function equips the rotten flesh in the bot's hand and consumes it, then sends a chat message indicating that the rotten flesh has been consumed.\n}"}, "craftPaper": {"code": "async function findSuitablePosition(bot) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"air\" || block.name === \"water\") {\n      const belowBlock = bot.blockAt(position.offset(0, -1, 0));\n      if (belowBlock.name !== \"air\" && belowBlock.name !== \"water\") {\n        return position;\n      }\n    }\n  }\n  return null;\n}\n\nasync function craftPaper(bot) {\n  // Check if there are enough sugar canes in the inventory\n  const sugarCanes = bot.inventory.findInventoryItem(mcData.itemsByName.sugar_cane.id);\n  if (!sugarCanes || sugarCanes.count < 3) {\n    // Explore the area to find more sugar canes\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const sugarCane = bot.findBlock({\n        matching: mcData.blocksByName.sugar_cane.id,\n        maxDistance: 32\n      });\n      return sugarCane;\n    });\n\n    // Mine the sugar canes\n    await mineBlock(bot, \"sugar_cane\", 3 - (sugarCanes ? sugarCanes.count : 0));\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  }) || bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft a crafting table using the oak_log in the inventory\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Find a suitable position to place the crafting table if it's not already placed\n  const craftingTableBlock = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  let craftingTablePosition;\n  if (!craftingTableBlock) {\n    craftingTablePosition = await findSuitablePosition(bot);\n    if (!craftingTablePosition) {\n      bot.chat(\"No suitable position found to place the crafting table.\");\n      return;\n    }\n  } else {\n    craftingTablePosition = craftingTableBlock.position;\n  }\n\n  // Place the crafting table at the suitable position\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft 3 paper using the sugar canes\n  await craftItem(bot, \"paper\", 1);\n  bot.chat(\"3 paper crafted.\");\n}", "description": "async function craftPaper(bot) {\n    // The function is about crafting 3 paper using sugar canes. First, it checks if there are enough sugar canes in the inventory, and if not, it explores the area to find more sugar canes and mines them. Then, it checks if there is a crafting table nearby or in the inventory, and if not, it crafts a crafting table using the oak_log in the inventory. Next, it finds a suitable position to place the crafting table if it's not already placed. Finally, it places the crafting table at the suitable position and crafts 3 paper using the sugar canes.\n}"}, "killOnePig": {"code": "async function killOnePig(bot) {\n  // Equip the iron_pickaxe from the inventory\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find the nearest pig and kill it using the iron_pickaxe\n  await killMob(bot, \"pig\", 300);\n  bot.chat(\"1 pig killed.\");\n}", "description": "async function killOnePig(bot) {\n    // The function is about killing one pig using an iron pickaxe. It equips the iron pickaxe from the inventory and finds the nearest pig within 300 blocks. Once the pig is found, it kills it using the iron pickaxe and logs a message that one pig has been killed.\n}"}, "cookPorkchops": {"code": "async function cookPorkchops(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  let craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n\n  // If not, mine wood, craft a crafting table, and place it\n  if (!craftingTable) {\n    const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n    if (!craftingTableItem) {\n      await mineBlock(bot, \"oak_log\", 1);\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    craftingTable = bot.blockAt(craftingTablePosition);\n  }\n\n  // Check if there is a furnace in the inventory or nearby\n  let furnace = bot.findBlock({\n    matching: mcData.blocksByName.furnace.id,\n    maxDistance: 32\n  });\n\n  // If not, mine cobblestone, craft a furnace, and place it\n  if (!furnace) {\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    if (!furnaceItem) {\n      await mineBlock(bot, \"stone\", 8);\n      await craftItem(bot, \"furnace\", 1);\n    }\n    const furnacePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"furnace\", furnacePosition);\n    furnace = bot.blockAt(furnacePosition);\n  }\n\n  // Check if there are enough raw porkchops in the inventory\n  const rawPorkchops = bot.inventory.findInventoryItem(mcData.itemsByName.porkchop.id);\n  if (!rawPorkchops || rawPorkchops.count < 3) {\n    // Kill pigs to collect the required raw porkchops\n    await killMob(bot, \"pig\", 300);\n  }\n\n  // Check if there is enough fuel (coal or wood) in the inventory\n  const fuel = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id) || bot.inventory.findInventoryItem(mcData.itemsByName.oak_log.id);\n  if (!fuel) {\n    // Mine coal or chop wood to collect the required fuel\n    await mineBlock(bot, \"coal_ore\", 1);\n  }\n\n  // Smelt the raw porkchops in the furnace using the fuel\n  await smeltItem(bot, \"porkchop\", fuel.name, 3);\n  bot.chat(\"3 porkchops cooked.\");\n}", "description": "async function cookPorkchops(bot) {\n    // The function is about cooking 3 porkchops using a furnace. It checks if there is a crafting table and a furnace nearby, and if not, it mines wood and cobblestone to craft and place them. It then checks if there are enough raw porkchops and fuel in the inventory, and if not, it kills pigs or mines coal/wood to collect them. Finally, it smelts the raw porkchops in the furnace using the fuel.\n}"}, "eatCookedPorkchops": {"code": "async function eatCookedPorkchops(bot) {\n  for (let i = 0; i < 3; i++) {\n    // Equip the cooked porkchop in the bot's hand\n    const cookedPorkchop = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_porkchop.id);\n    await bot.equip(cookedPorkchop, \"hand\");\n\n    // Consume the cooked porkchop\n    await bot.consume();\n  }\n  bot.chat(\"3 cooked porkchops eaten.\");\n}", "description": "async function eatCookedPorkchops(bot) {\n    // The function is about eating 3 cooked porkchops. The function equips the cooked porkchop in the bot's hand and consumes it three times. After consuming three cooked porkchops, the function sends a chat message indicating that 3 cooked porkchops have been eaten.\n}"}, "killOneCow": {"code": "async function killOneCow(bot) {\n  // Equip the iron_pickaxe from the inventory\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find the nearest cow and kill it using the iron_pickaxe\n  await killMob(bot, \"cow\", 300);\n  bot.chat(\"1 cow killed.\");\n}", "description": "async function killOneCow(bot) {\n    // The function is about killing one cow using an iron pickaxe. It equips the iron pickaxe from the inventory and finds the nearest cow within 300 blocks. Once the cow is found, it is killed using the iron pickaxe and a message is sent to the chat indicating that one cow has been killed.\n}"}, "killOneSkeleton": {"code": "async function killOneSkeleton(bot) {\n  // Equip the iron_pickaxe from the inventory\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find the nearest skeleton and kill it using the iron_pickaxe\n  await killMob(bot, \"skeleton\", 300);\n  bot.chat(\"1 skeleton killed.\");\n}", "description": "async function killOneSkeleton(bot) {\n    // The function is about killing one skeleton using an iron pickaxe. It equips the iron pickaxe from the inventory and finds the nearest skeleton within 300 blocks. Once the skeleton is found, it kills it using the iron pickaxe and outputs a message indicating that one skeleton has been killed.\n}"}, "mineOneRedstoneOre": {"code": "async function mineOneRedstoneOre(bot) {\n  // Step 1: Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Explore the area below layer 16 to find a redstone ore block\n  let redstoneOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n    if (bot.entity.position.y > 16) return null;\n    const redstoneOreBlock = bot.findBlock({\n      matching: mcData.blocksByName.redstone_ore.id,\n      maxDistance: 32\n    });\n    return redstoneOreBlock;\n  });\n\n  // Step 3: Mine the redstone ore block using the iron pickaxe\n  if (redstoneOre) {\n    await mineBlock(bot, \"redstone_ore\", 1);\n    bot.chat(\"1 redstone ore mined.\");\n  } else {\n    bot.chat(\"Could not find a redstone ore block.\");\n  }\n}", "description": "async function mineOneRedstoneOre(bot) {\n    // The function is about mining a single redstone ore block using an iron pickaxe. First, the function equips the iron pickaxe. Then, it explores the area below layer 16 to find a redstone ore block. Once the redstone ore block is found, the function mines it using the iron pickaxe and outputs a message indicating that one redstone ore block has been mined. If the redstone ore block is not found, the function outputs a message indicating that it could not find a redstone ore block.\n}"}, "mineTenRedstoneOres": {"code": "async function mineTenRedstoneOres(bot) {\n  // Step 1: Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Explore the area below layer 16 to find redstone ore blocks\n  let redstoneOres = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n    if (bot.entity.position.y > 16) return null;\n    const redstoneOreBlocks = bot.findBlocks({\n      matching: mcData.blocksByName.redstone_ore.id,\n      maxDistance: 32,\n      count: 10\n    });\n    return redstoneOreBlocks.length >= 10 ? redstoneOreBlocks : null;\n  });\n\n  // Step 3: Mine 10 redstone ore blocks using the iron pickaxe\n  if (redstoneOres) {\n    await mineBlock(bot, \"redstone_ore\", 10);\n    bot.chat(\"10 redstone ores mined.\");\n  } else {\n    bot.chat(\"Could not find 10 redstone ore blocks.\");\n  }\n}", "description": "async function mineTenRedstoneOres(bot) {\n    // The function is about mining 10 redstone ore blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment below layer 16 until finding 10 redstone ore blocks. Once 10 redstone ore blocks are found, mine them using the iron pickaxe. If 10 redstone ore blocks are not found, output a message indicating that they could not be found.\n}"}, "mineDeepslateLapisOre": {"code": "async function mineDeepslateLapisOre(bot) {\n  // Step 1: Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Find a deepslate_lapis_ore block nearby or explore the area to find one\n  let deepslateLapisOre = bot.findBlock({\n    matching: mcData.blocksByName.deepslate_lapis_ore.id,\n    maxDistance: 32\n  });\n  if (!deepslateLapisOre) {\n    deepslateLapisOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const deepslateLapisOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.deepslate_lapis_ore.id,\n        maxDistance: 32\n      });\n      return deepslateLapisOreBlock;\n    });\n  }\n\n  // Step 3: Mine the deepslate_lapis_ore block using the iron_pickaxe\n  if (deepslateLapisOre) {\n    await mineBlock(bot, \"deepslate_lapis_ore\", 1);\n    bot.chat(\"1 deepslate lapis ore mined.\");\n  } else {\n    bot.chat(\"Could not find a deepslate lapis ore block.\");\n  }\n}", "description": "async function mineDeepslateLapisOre(bot) {\n    // The function is about mining a single deepslate lapis ore block using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, find a nearby deepslate lapis ore block or explore the area to find one. Once a deepslate lapis ore block is found, mine it using the iron pickaxe.\n}"}}